'use strict';

module.exports = () => {
  return async function graphqlResponseHandler(ctx, next) {
    let isGqlQuery = false;
    // 判断是否在生产环境
    const isProduction = process.env.NODE_ENV === 'production';

    // 判断是否是 GraphQL 查询请求，判断1 是否包含约定的 /grpahql 字符
    const isGraphqlPath = ctx.request.url.includes('/graphql');
    // 判断2 正常 grapqhl 都是 json
    const isJsonContent = ctx.request.header['content-type']?.includes('application/json');

    if (isGraphqlPath && isJsonContent) {
      // 符合 GraphQL 查询的路径和内容类型，表明这是一次 GraphQL 数据请求
      // eslint-disable-next-line no-unused-vars
      isGqlQuery = true;
      if (!isProduction) {
        const currentTime = new Date().toLocaleTimeString('zh-CN', { hour12: false, timeZone: 'Asia/Shanghai' });
        console.log(`[${currentTime}]-------检测到外部发起的 GraphQL 查询-------`);
        // console.log(ctx.request.body.query);
      } else {
        ctx.logger.info(`GraphQL 请求发起自: ${ctx.request.header.referer || ctx.request.header.origin}`);
      }
    }

    await next();

    if (ctx.body) {
      const response = ctx.body;
      ctx.body = {
        success: !response.errors,
        data: response.data,
        errorCode: response.errors?.[0]?.extensions?.code,
        errorMessage: response.errors?.[0]?.message,
        showType: response.errors?.[0]?.extensions?.showType ?? 0,
        host: ctx.request.header.host,
      };

      if (response.errors) {
        const queryInfo = {
          method: ctx.request.method,
          query: ctx.request.body?.query?.replace(/\s+/g, ' ').trim(),
          variables: ctx.request.body?.variables,
          url: ctx.request.url,
          referer: ctx.request.header.referer || ctx.request.header.origin,
        };
        console.error('GraphQL Error:', JSON.stringify({
          ...queryInfo,
          error: response.errors[0].message,
          code: response.errors[0].extensions?.code,
        }, null, 2));
      }
    }
  };
};
